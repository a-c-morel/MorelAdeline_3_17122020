@import 'mixins', 'extensions';

/*HEART ANIMATION*/

.heart-animation{
    cursor: pointer;
    background: white;
    -webkit-background-clip : text;
    background-clip: text;
    -webkit-text-fill-color : transparent;
    font-size: 1.5rem;
}

#heart1:checked ~ .heart-animation,
#heart2:checked ~ .heart-animation,
#heart3:checked ~ .heart-animation,
#heart4:checked ~ .heart-animation,
#heart-menu-1:checked ~ .heart-animation,
#heart-menu-2:checked ~ .heart-animation,
#heart-menu-3:checked ~ .heart-animation,
#heart-menu-4:checked ~ .heart-animation
{
    animation: like .4s;
    animation-timing-function: linear;
    background: linear-gradient(to top, $secondary 96%, #fff 96%);
    background-size: auto;
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent;
  }
  
/*I used the background-clip: text value because the full and empty heart icon have exactly the same code
in FontAwesome, so I used this little trick to make the border. It is an experimental property
so I checked in caniuse to see if it was okay to use it with Firefox and Chrome at least.
I tried different ways to do the heart and it was my favorite one so I kept it.*/
.heart-animation{
    position: relative;
    &:after{
    content: '\f004';
    font-family: "Font Awesome 5 Free";
    font-size: 1.6rem;
    color: white;
    background: #393939;
    -webkit-background-clip : text;
    background-clip: text;
    -webkit-text-fill-color : transparent;
    position: absolute;
    left: -1px;
    top: -2px;
    }
}
  
input{
    display: none;
}

/*To avoid repetitions, I made a mixin which allows me to customize the linear-gradient for each step
of the animation. You can find it in '_mixins.scss'*/
@keyframes like{
    0%{
      @include linear-gradient(0%, 0%);
    }
    
    25%{
      @include linear-gradient(25%, 25%);
    }
    
    50%{
      @include linear-gradient(50%, 50%);
    }
    
    75%{
      @include linear-gradient(75%, 75%);
    }
    
    100%{
      @include linear-gradient(100%, 100%);
    } 
}

/*LOADING SPINNER*/

.loading{
  height: 200vh;
  width: 100%;
  animation: loading_background 3.8s;
  animation-timing-function: ease-out;
  position: absolute;
  z-index: 2;
  animation-fill-mode: forwards;

  &__spinner{
    animation: loading_spinner 1s;
    animation-timing-function: linear;
    animation-iteration-count: 4;
    width: 80px;
    height: 80px;
    border-radius: 50%;
    position: absolute;
    transform: translate3d(-50%, -50%, 0);
    z-index: 3;
    top: 270px;
    margin-left: auto;
    margin-right: auto;
    left: 80px;
    right: 0;
    will-change: transform;
  }
}


@keyframes loading_background{
  0%{
    background: rgb(0, 0, 0);
    opacity: 0.8;
  }
  25%{
    background: rgb(0, 0, 0);
    opacity: 0.8;
  }
  50%{
    background: rgb(0, 0, 0);
    opacity: 0.2;
    /*z-index: 1;
    -> my first idea was to use z-index and decrease it to make it disapear,
    but it was jerky and some elements seemed to pop up because of their z-index which were higher*/
  }
  75%{
    background: rgb(0, 0, 0);
    opacity: 0.1;
    /*z-index: 0;*/
  }
  100%{
    background: rgb(0, 0, 0);
    opacity: 0;
    height: 0;
  }
}

@keyframes loading_spinner{
  0%{
    border: 8px solid $tertiary;
    border-bottom-color: $primary;
    opacity: 1;
    transform: translate3d(-50%, -50%, 0) rotate(0deg);
  }
  100%{
    border: 8px solid $tertiary;
    border-bottom-color: $primary;
    opacity: 1;
    transform: translate3d(-50%, -50%, 0) rotate(360deg);
  }
}

/*SLIDE-UP FOR STARTERS, DISHES AND DESSERTS SECTIONS*/

.starters{
  animation: slide-up 2s;
}

.dishes{
  animation: slide-up 6s;
}

.desserts{
  animation: slide-up 10s;
}

@keyframes slide-up{
  from{
    transform: translateY(200px);
    opacity: 0;
  }
  to{
    transform: translateY(0);
    opacity: 1;
  }
}

/*DISH SELECTION*/

/*.dish-select:hover{
  .fa-check-circle{
    animation: check .5s;
    animation-fill-mode: forwards;
  }
}

@keyframes check{
  from{transform: rotate(180deg);}
  to{transform: rotate(0deg);}
}*/